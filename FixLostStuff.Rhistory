#Check working directory
getwd()=="C:/Users/Owner/Documents/avalanche/avalanche"
#Read in csv files
avalInfo <- read.csv('avalanches_raw.csv')
weatInfo <- read.csv('altaGuardWeather6516.csv', na.strings = -9999)
#Make the "dates variable", dates
avalInfo$Date <- as.Date( as.character(avalInfo$Date), format="%m-%d-%y")
weatInfo$DATE <-as.Date(as.character(weatInfo$DATE), format="%Y%m%d")
# Check that they are dates
str(weatInfo$DATE)
str(avalInfo$Date)
#Convert factors to numerics
avalInfo$Elevation <- as.numeric(as.character(avalInfo$Elevation))
avalInfo$Width <- as.numeric(as.character(avalInfo$Width))
avalInfo$Vertical <- as.numeric(as.character(avalInfo$Vertical))
#Fix Depth since it is in inches and feet
#Store ft values
ftvals <- grep("'", avalInfo$Depth)
#Remove ' and " so that NA's are not introduced for numeric values
avalInfo$Depth <- gsub("'","",avalInfo$Depth)
avalInfo$Depth <-gsub("\"","",avalInfo$Depth)
#Convert to numeric so I can use operators
avalInfo$Depth <- as.numeric(as.character(avalInfo$Depth))
#Multiply the feet by 12
avalInfo$Depth[ftvals] <- avalInfo$Depth[ftvals]*12
#Fix Coordinates, so that they are split into lat and long
library(reshape2)
avalInfo$Coordinates <- colsplit(avalInfo$Coordinates,",", c("Latitude", "Longitude"))
#Replace 0's in Coordinates with NA
avalInfo$Coordinates$Latitude <- gsub("\\b0\\b","", avalInfo$Coordinates$Latitude)
avalInfo$Coordinates$Latitude <- as.numeric(as.character(avalInfo$Coordinates$Latitude))
avalInfo$Coordinates$Longitude <- as.numeric(as.character(gsub("\\b0\\b","", avalInfo$Coordinates$Longitude)))
# Create ordered data (in this case I ordered it so that NE is centered, because then it looks normal)
avalInfo$Aspect = factor(avalInfo$Aspect, levels=c("West", "Northwest", "North", "Northeast", "East", "Southeast", "South", ""), ordered = TRUE)
#Merge the two data sets by date
aw_df <- merge(avalInfo, weatInfo, by.x = "Date", by.y="DATE", all.y = FALSE)
#Remove data that is missing at least 90% of its observations
aw_df$STATION <- NULL
aw_df$STATION_NAME <- NULL
aw_df$MDPR <- NULL
aw_df$MDSF <- NULL
aw_df$DAPR<- NULL
aw_df$DASF <- NULL
aw_df$WT01 <- NULL
aw_df$WT06 <- NULL
aw_df$WT05 <- NULL
aw_df$WT11 <- NULL
aw_df$WT04 <- NULL
aw_df$WT03 <- NULL
#Create data frame for caught, carried, and buried
ccb <- data.frame(date=aw_df$Date, Caught=aw_df$Caught, Carried=aw_df$Carried, Buried.Partly=aw_df$Buried...Partly, Buried.Fully=aw_df$Buried...Fully)
# Now use that data frame to gather column names into a key "TypeOfRide" variable
ccb <- melt(ccb, id.vars="date", na.rm=T)
#Change column names
colnames(ccb)[2] <- "TypeOfRide"
colnames(ccb)[3] <- "TypeOfRideN"
#Now merge ccb to aw_df
aw_df_ccb <- merge(aw_df, ccb, by.x = "Date", all.x=FALSE, by.y="date", all.y=TRUE)
#Remove unessecary columns
aw_df_ccb$Caught <- NULL
aw_df_ccb$Carried <- NULL
aw_df_ccb$Buried...Fully <- NULL
aw_df_ccb$Buried...Partly <- NULL
#Create data frame injured or killed
ik <- data.frame(date=aw_df$Date, Injured=aw_df$Injured , Killed=aw_df$Killed)
# Now use that data frame to gather column names into a key "BodilyHarm" variable
ik <- melt(ik, id.vars="date", na.rm=T)
#Change column names
colnames(ik)[2] <- "BodilyHarm"
colnames(ik)[3] <- "BodilyHarmN"
#Now merge ccb to aw_df creates to many duplicates
aw_df_ik <- merge(aw_df, ik, by.x = "Date", all.x = FALSE, by.y="date", all.y=TRUE)
#Remove unessecary columns
aw_df_ik$Killed <- NULL
aw_df_ik$Injured <- NULL
#Remove data that has been cleaned into other data sets
aw_df$Caught <- NULL
aw_df$Carried <- NULL
aw_df$Buried...Fully <- NULL
aw_df$Buried...Partly <- NULL
aw_df$Killed <- NULL
aw_df$Injured <- NULL
#Check working directory
getwd()=="C:/Users/Owner/Documents/avalanche/avalanche"
#Read in csv files
avalInfo <- read.csv('avalanches_raw.csv')
weatInfo <- read.csv('altaGuardWeather6516.csv', na.strings = -9999)
#Make the "dates variable", dates
avalInfo$Date <- as.Date( as.character(avalInfo$Date), format="%m-%d-%y")
weatInfo$DATE <-as.Date(as.character(weatInfo$DATE), format="%Y%m%d")
# Check that they are dates
str(weatInfo$DATE)
str(avalInfo$Date)
#Convert factors to numerics
avalInfo$Elevation <- as.numeric(as.character(avalInfo$Elevation))
avalInfo$Width <- as.numeric(as.character(avalInfo$Width))
avalInfo$Vertical <- as.numeric(as.character(avalInfo$Vertical))
#Fix Depth since it is in inches and feet
#Store ft values
ftvals <- grep("'", avalInfo$Depth)
#Remove ' and " so that NA's are not introduced for numeric values
avalInfo$Depth <- gsub("'","",avalInfo$Depth)
avalInfo$Depth <-gsub("\"","",avalInfo$Depth)
#Convert to numeric so I can use operators
avalInfo$Depth <- as.numeric(as.character(avalInfo$Depth))
#Multiply the feet by 12
avalInfo$Depth[ftvals] <- avalInfo$Depth[ftvals]*12
#Fix Coordinates, so that they are split into lat and long
library(reshape2)
avalInfo$Coordinates <- colsplit(avalInfo$Coordinates,",", c("Latitude", "Longitude"))
#Replace 0's in Coordinates with NA
avalInfo$Coordinates$Latitude <- gsub("\\b0\\b","", avalInfo$Coordinates$Latitude)
avalInfo$Coordinates$Latitude <- as.numeric(as.character(avalInfo$Coordinates$Latitude))
avalInfo$Coordinates$Longitude <- as.numeric(as.character(gsub("\\b0\\b","", avalInfo$Coordinates$Longitude)))
# Create ordered data (in this case I ordered it so that NE is centered, because then it looks normal)
avalInfo$Aspect = factor(avalInfo$Aspect, levels=c("West", "Northwest", "North", "Northeast", "East", "Southeast", "South", ""), ordered = TRUE)
#Merge the two data sets by date
aw_df <- merge(avalInfo, weatInfo, by.x = "Date", by.y="DATE", all.y = FALSE)
#Remove data that is missing at least 90% of its observations
aw_df$STATION <- NULL
aw_df$STATION_NAME <- NULL
aw_df$MDPR <- NULL
aw_df$MDSF <- NULL
aw_df$DAPR<- NULL
aw_df$DASF <- NULL
aw_df$WT01 <- NULL
aw_df$WT06 <- NULL
aw_df$WT05 <- NULL
aw_df$WT11 <- NULL
aw_df$WT04 <- NULL
aw_df$WT03 <- NULL
#Create data frame for caught, carried, and buried
ccb <- data.frame(date=aw_df$Date, Caught=aw_df$Caught, Carried=aw_df$Carried, Buried.Partly=aw_df$Buried...Partly, Buried.Fully=aw_df$Buried...Fully)
# Now use that data frame to gather column names into a key "TypeOfRide" variable
ccb <- melt(ccb, id.vars="date", na.rm=T)
#Change column names
colnames(ccb)[2] <- "TypeOfRide"
colnames(ccb)[3] <- "TypeOfRideN"
#Now merge ccb to aw_df
aw_df_ccb <- merge(aw_df, ccb, by.x = "Date", all.x=FALSE, by.y="date", all.y=TRUE)
#Remove unessecary columns
aw_df_ccb$Caught <- NULL
aw_df_ccb$Carried <- NULL
aw_df_ccb$Buried...Fully <- NULL
aw_df_ccb$Buried...Partly <- NULL
#Create data frame injured or killed
ik <- data.frame(date=aw_df$Date, Injured=aw_df$Injured , Killed=aw_df$Killed)
# Now use that data frame to gather column names into a key "BodilyHarm" variable
ik <- melt(ik, id.vars="date", na.rm=T)
#Change column names
colnames(ik)[2] <- "BodilyHarm"
colnames(ik)[3] <- "BodilyHarmN"
#Now merge ccb to aw_df creates to many duplicates
aw_df_ik <- merge(aw_df, ik, by.x = "Date", all.x = FALSE, by.y="date", all.y=TRUE)
#Remove unessecary columns
aw_df_ik$Killed <- NULL
aw_df_ik$Injured <- NULL
#Remove data that has been cleaned into other data sets
aw_df$Caught <- NULL
aw_df$Carried <- NULL
aw_df$Buried...Fully <- NULL
aw_df$Buried...Partly <- NULL
aw_df$Killed <- NULL
aw_df$Injured <- NULL
#Load the library to plot with
library(ggplot2)
#Plots
#Plot Date
qplot(data = aw_df, x=Date, bins=296)
#Plot Region
qplot(data = aw_df, x=Region)
#Plot Place
qplot(data = aw_df, x=Place)
#Plot Trigger
qplot(data = aw_df, x=Trigger)
#qplot(data = avalInfo, x=Trigger)
#Plot Weak Layer
qplot(data = aw_df, x=Weak.Layer)
#qplot(data = avalInfo, x=Weak.Layer)
#Plot Depth
ggplot(data = aw_df, aes(x=Depth))+
geom_histogram(breaks=seq(0,120,1)) #+  xlim(c(0,60))
#Plot Width
ggplot(data = aw_df, aes(x=Width))+
geom_histogram(breaks=seq(5,1000,10)) + xlim(c(0,500))
#Plot Vertical
ggplot(data = aw_df, aes(x=Vertical))+
geom_histogram(breaks=seq(10,3500,10)) + xlim(c(10,2500))
#Plot Aspect
qplot(data = aw_df, x=Aspect)
#Plot of Elevation
ggplot(data = aw_df, aes(x=Elevation)) +
geom_histogram( breaks=seq(7700,11200, 100)) +
xlim(c(7700,11200))
#Plot Latitude
ggplot(data = aw_df, aes(x=Coordinates$Latitude))+
geom_histogram(breaks=seq(40.38,42.8,0.01)) +
xlim(c(40.38,42.08))
#Plot Longitude
ggplot(data = aw_df, aes(x=Coordinates$Longitude))+
geom_histogram(breaks=seq(-112.25,-111.0,0.005))+
xlim(c(-112.25,-111.0))
#Plot how many were caught/carried/Buried
qplot(data = aw_df_ccb, x=TypeOfRide)
#Plot how many were injured or killed
qplot(data=aw_df_ik, x=BodilyHarm)
#Plot Precipitation
ggplot(data=aw_df, aes(x=PRCP))+
geom_histogram(breaks=seq(0, 3, 0.05)) #+ xlim(c(0.0001,3))
#Plot Snow depth
ggplot(aw_df, aes(x=SNWD))+
geom_histogram(breaks=seq(0,168,10))
#Plot Snowfall
ggplot(aw_df, aes(x=SNOW)) +
geom_histogram(breaks=seq(0,32,0.2)) #+xlim(.01,22)
#Plot max temperature
ggplot(aw_df, aes(x=TMAX))+
geom_histogram(breaks=seq(1,61,3))
#Plot minimum temperature
ggplot(aw_df, aes(x=TMIN))+
geom_histogram(breaks=seq(-13,40,2))
#Plot temperature at time of observation
ggplot(aw_df, aes(x=TOBS))+
geom_histogram()
# Frequency Plot with multiple lines
ggplot(data = avalInfo, aes(x=Elevation)) +
geom_freqpoly(aes(color=Aspect))
#Frequency Plot based on proportions
ggplot(aes(x=avalInfo$Elevation, y=(..count../sum(..count..))), data=avalInfo) +
geom_freqpoly(aes(color=Aspect))+
labs(y="Percentage of Avalanches")
#Box Plots
ggplot(avalInfo, aes(x=NoNA)) +
geom_boxplot()
#Create a plot (histogram in this case) the facets makes a bunch of plots
qplot(data=avalInfo, x=Elevation, binwidth=150 )+
facet_grid(Aspect~Elevation)
plot(aw_df_ik$TMIN, aw_df_ik$BodilyHarmN)
abline(lm(aw_df_ik$TMIN~aw_df_ik$BodilyHarmN))
abline(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMIN))
lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMIN)
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMIN))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMAX))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$PRCP))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$Elevation))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$SNWD))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$SNOW))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMIN))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMAX))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TOBS))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMIN))
source(loadData.R)
source(loadData.R)
loadData.R
list.files()
source("loadData.R")
lm(TypeOfRideN~TMIN, data = aw_df_ccb)
summary(lm(TypeOfRideN~TMIN, data = aw_df_ccb))
plot(aw_df_ccb$TMIN, aw_df_ccb$TypeOfRideN)
abline(lm(TypeOfRideN~TMIN, data = aw_df_ccb))
summary(lm(TypeOfRideN~TMAX, data = aw_df_ccb))
plot(aw_df_ccb$TMAX, aw_df_ccb$TypeOfRideN)
abline(lm(TypeOfRideN~TMAX, data = aw_df_ccb))
summary(lm(TypeOfRideN~PRCP, data = aw_df_ccb))
summary(lm(TypeOfRideN~SNOW, data = aw_df_ccb))
summary(lm(TypeOfRideN~SNWD, data = aw_df_ccb))
summary(lm(TypeOfRideN~TOBS, data = aw_df_ccb))
summary(lm(TypeOfRideN~Elevation, data = aw_df_ccb))
summary(lm(Depth~Width, data=avalInfo))
plot(Depth~Width, data=avalInfo)
abline(lm(Depth~Width, data=avalInfo))
summary(lm(aw_df_ik$BodilyHarmN~aw_df_ik$TMIN))
#As min/max/observed temp increases going for a ride decreases, this data might be skewed because of the difference in the magnitudes of the numbers
summary(lm(TypeOfRideN~TMIN, data = aw_df_ccb))
summary(lm(TypeOfRideN~TMAX, data = aw_df_ccb))
summary(lm(TypeOfRideN~TOBS, data = aw_df_ccb))
#As precipitation/Snowfall/Depth of snow increases going for a ride increases
summary(lm(TypeOfRideN~PRCP, data = aw_df_ccb))
summary(lm(TypeOfRideN~SNOW, data = aw_df_ccb))
summary(lm(TypeOfRideN~SNWD, data = aw_df_ccb))
summary(lm(TypeOfRideN~TMIN, data = aw_df_ccb))
summary(lm(TypeOfRideN~TMIN, data = aw_df_ccb))
summary(lm(TypeOfRideN~TMAX, data = aw_df_ccb))
summary(lm(TypeOfRideN~TOBS, data = aw_df_ccb))
#As precipitation/Snowfall/Depth of snow increases going for a ride increases
summary(lm(TypeOfRideN~PRCP, data = aw_df_ccb))
summary(lm(TypeOfRideN~SNOW, data = aw_df_ccb))
#The association below has an ok residual error compared to the others
summary(lm(TypeOfRideN~SNWD, data = aw_df_ccb))
savehistory("~/avalanche/avalanche/FixLostStuff.Rhistory")
